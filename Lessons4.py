"""1.Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами."""

from sys import argv
name, working_out, bet_out, bonus = argv
working_out = int(working_out)
bet_out = int(bet_out)
bonus = int(bonus)
results =working_out * bet_out + bonus
print('Заробатная плата сотрудника' + str(results))

"""2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123]."""

first_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
result_list = [el for num, el in enumerate(first_list) if first_list[num - 1] < first_list[num]]
print(result_list)

"""3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор."""

res_list_3 = [el for el in range(20, 240) if el % 20 == 0 or el % 21 == 0]
print(res_list_3)

"""4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, соответствующих требованию. 
Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]"""

second_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
res_list_4 = [el for el in second_list if second_list.count(el) == 1]
print(res_list_4)

"""5. Реализовать формирование списка, используя функцию range() и возможности генератора. 
В список должны войти четные числа от 100 до 1000 (включая границы). 
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce()."""
from functools import reduce

res_list_5 = [el for el in range(100, 1001) if el % 2 == 0]

def func_1(el_1, el):
    return el_1 * el

print(reduce(func_1, [el for el in range(100, 1001) if el % 2 == 0]))

"""6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. 
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено."""

from itertools import count, cycle

for el in count(3):
    if el == 10:
        break
    else:
        print(el)

my_list = ['h', 'o', 'm', 'e', 'w', 'o', 'r', 'k']
c = 0
for el in cycle(my_list):
    if c == 10:
        break
    else:
        print(el)
    c += 1

"""7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). 
Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24."""

from itertools import count

from math import factorial

def func():
    for el in count(1):
        yield factorial(el)

gen = func()
x = 0
for i in gen:
    if x < 15:
        print(i)
        x += 1
    else:
        break